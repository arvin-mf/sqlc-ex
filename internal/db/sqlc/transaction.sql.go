// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transaction.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addTransaction = `-- name: AddTransaction :execresult
INSERT INTO transactions (id, user_id, descript)
VALUES (?, ?, ?)
`

type AddTransactionParams struct {
	ID       string
	UserID   string
	Descript sql.NullString
}

func (q *Queries) AddTransaction(ctx context.Context, arg AddTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTransaction, arg.ID, arg.UserID, arg.Descript)
}

const getAllByUserID = `-- name: GetAllByUserID :many
SELECT id, user_id, descript FROM transactions WHERE user_id = ?
`

func (q *Queries) GetAllByUserID(ctx context.Context, userID string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(&i.ID, &i.UserID, &i.Descript); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
